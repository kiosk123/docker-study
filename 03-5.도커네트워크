# 도커는 컨테이너에 외부와의 네트워크를 제공하기 위해 컨테이너마다 가상 네트워크
# 인터페이스를 생성한다 이때 생성되는 인터페이스명은 veth로 시작한다
# ifconfig으로 확인식 veth 인터페이스는 컨테이너 갯수만큼 생성된 것 확인가능
# docker0는 veth 인터페이스와 바인딩돼 호스트의 eth0 인터페이스와 연결해주는 브릿지 역할

# 도커에서 사용가능한 네트워크 목록 확인
sudo docker network ls

# 도커 네트워크 인터페이스 정보 확인
# Config 항목에서 디폴트로 docker0 브릿지 사용확인 가능
sudo docker network inspect bridge

# bridge(브릿지) 네트워크
# docker0가 아닌 사용자 정의 브리지를 새로 생성해 각 컨테이너에 연결하는 네트워크 구조
# 컨테이너는 연결된 브리지를 통해 외부와 통신가능
# 새로운 브리지 네트워크를 생성한다.
sudo docker network create --driver bridge mybridge


# 컨테이너를 실행하면서 생성한 mybridge 네트워클 사용하게 함
sudo docker run -i -t --name mynetwork_container \
--net mybridge \
ubuntu:14.04

# 생성된 사용자 정의 네트워크에 컨테이너 끊고 다시 연결하기
# 논 네트워크, 호스트 네트워크 등과 같은 특별한 네트워크 모드에는 사용할 수 없음
sudo docker network disconnect mybridge mynetwork_container
sudo docker network connect mybridge mynetwork_container

# 네트워크 생성시 서브넷, 게이트웨이, IP할당 범위등을 임의로 설정
sudo docker network create --driver=bridge \
--subnet=172.72.0.0/16 \
--ip-range=172.72.0.0/24 \
--gateway=172.72.0.1 \
my_custom_network

# host(호스트) 네트워크
# 호스트 드라이버의 네트워크는 별도로 생성할 필요없이 기존의 host라는 이름의 네트워크 사용
# 컨테이너를 실행하면서 host 네트워크를 사용하도록 설정한다
# host로 설정된 컨테이너의 네트워크는 도커가 실행되는 호스트 컴퓨터의 네트워크와
# 동일한 네트워크 구조를 가진다. (호스트 컴퓨터의 네트워크 환경을 그대로 사용가능)
# 그렇기 때문에 컨테이너 내부의 애플리케이션을 별도의 포트 포워딩 없이 바로 서비스 가능하다.
sudo docker run -t -i --name network_host \
--net host \
ubuntu:14.04

# none(논) 네트워크
# none은 말 그대로 아무런 네트워크를 쓰지 않는 것을 뜻한다. 
# 다음과 같이 컨테이너를 생성하면 외부와의 연결이 단절된다.

sudo docker run -i -t --name network_none \
--net none \
ubuntu:14.04

# 컨테이너 네트워크
# --net 옵션으로 container를 입력하면 다른 컨테이너의 네트워크 네임스페이스 환경을
# 공유할 수 있다. 공유되는 속성은 내부 IP,. 네트워크 인터페이스의 맥(MAC) 주소 등이다.
# --net 옵션의 값으로 container:[다른 컨테이너의 ID]와 같이 입력한다.
sudo docker run -i -t -d --name network_container_1 ubuntu:14.04

# network_container_1과 네트워크 공유
sudo docker run -i -t -d --name network_cotainer_2 \
--net container:network_container_1 \
ubuntu:14.04


